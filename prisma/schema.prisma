generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String              @id @default(uuid())
  firebaseUid            String              @unique
  email                  String              @unique
  role                   String?             @default("user")
  hobbies                String[]
  birthDate              DateTime?
  password               String?
  displayName            String?
  firstName              String?
  lastName               String?
  bio                    String?
  profileImageUrl        String?
  countryCode            String?
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  isActive               Boolean             @default(true)
  Comment                Comment[]
  CommentLike            CommentLike[]
  followers              Follow[]            @relation("UserFollowers")
  following              Follow[]            @relation("UserFollowing")
  matchesInitiated       Match[]             @relation("MatchInitiator")
  matchesReceived        Match[]             @relation("MatchReceiver")
  receivedRequests       MatchRequest[]      @relation("RequestReceiver")
  sentRequests           MatchRequest[]      @relation("RequestSender")
  sentMessages           Message[]           @relation("MessageSender")
  MessageCorrection      MessageCorrection[]
  sentActorNotifications Notification[]      @relation("NotificationActor")
  receivedNotifications  Notification[]      @relation("UserNotifications")
  Post                   Post[]
  PostLike               PostLike[]
  SavedWord              SavedWord[]
  Story                  Story[]
  StoryView              StoryView[]
  conversations          UserConversation[]
  languages              UserLanguage[]      @relation("UserLanguages")
  settings               UserSettings?
  stats                  UserStats?

  @@index([countryCode])
  @@index([displayName])
  @@index([isActive])
}

model UserLanguage {
  id         String        @id @default(uuid())
  userId     String
  languageId String
  level      LanguageLevel
  isNative   Boolean       @default(false)
  isLearning Boolean       @default(false)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  language   Language      @relation(fields: [languageId], references: [id], onDelete: Cascade)
  user       User          @relation("UserLanguages", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, languageId])
  @@index([isNative, languageId])
  @@index([isLearning, languageId])
}

model UserSettings {
  id                     String                  @id @default(uuid())
  userId                 String                  @unique
  emailNotifications     Boolean                 @default(true)
  pushNotifications      Boolean                 @default(true)
  privateProfile         Boolean                 @default(false)
  theme                  String?
  language               String                  @default("en")
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  user                   User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  notificationPreferences NotificationPreference[]
}

model UserStats {
  id             String    @id @default(uuid())
  userId         String    @unique
  matchesCount   Int       @default(0)
  messagesCount  Int       @default(0)
  followersCount Int       @default(0)
  followingCount Int       @default(0)
  postsCount     Int       @default(0)
  learningDays   Int       @default(0)
  lastActiveDate DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Language {
  id            String         @id @default(uuid())
  code          String         @unique
  name          String
  nativeName    String
  flagEmoji     String?
  conversations Conversation[]
  Post          Post[]
  SavedWord     SavedWord[]
  Story         Story[]
  userLanguages UserLanguage[]
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Match {
  id             String        @id @default(uuid())
  initiatorId    String
  receiverId     String
  conversationId String?       @unique
  isFavorite     Boolean       @default(false)
  status         String        @default("active")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  initiator      User          @relation("MatchInitiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  receiver       User          @relation("MatchReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
}

model MatchRequest {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  status     String   @default("pending")
  message    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  receiver   User     @relation("RequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("RequestSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}

model Conversation {
  id           String             @id @default(uuid())
  languageId   String
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  language     Language           @relation(fields: [languageId], references: [id])
  match        Match?
  messages     Message[]
  participants UserConversation[]
}

model UserConversation {
  id             String       @id @default(uuid())
  userId         String
  conversationId String
  lastReadAt     DateTime?
  isArchived     Boolean      @default(false)
  isMuted        Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
}

model Message {
  id             String              @id @default(uuid())
  conversationId String
  senderId       String
  content        String
  contentType    String              @default("text")
  mediaUrl       String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  conversation   Conversation        @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User                @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  corrections    MessageCorrection[]

  @@index([conversationId, createdAt(sort: Desc)])
  @@index([senderId, createdAt(sort: Desc)])
}

model MessageCorrection {
  id               String   @id @default(uuid())
  messageId        String
  userId           String
  correctedContent String
  explanation      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  message          Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id         String      @id @default(uuid())
  authorId   String
  content    String
  languageId String?
  isPublic   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  comments   Comment[]
  author     User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  language   Language?   @relation(fields: [languageId], references: [id])
  likes      PostLike[]
  media      PostMedia[]

  @@index([authorId, createdAt(sort: Desc)])
  @@index([languageId, createdAt(sort: Desc)])
  @@index([isPublic, createdAt(sort: Desc)])
}

model PostMedia {
  id          String   @id @default(uuid())
  postId      String
  type        String
  url         String
  description String?
  createdAt   DateTime @default(now())
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model PostLike {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model Comment {
  id              String        @id @default(uuid())
  postId          String
  authorId        String
  content         String
  parentCommentId String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  author          User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parentComment   Comment?      @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies         Comment[]     @relation("CommentReplies")
  post            Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  likes           CommentLike[]
}

model CommentLike {
  id        String   @id @default(uuid())
  commentId String
  userId    String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@index([userId])
}

model Story {
  id         String      @id @default(uuid())
  authorId   String
  type       String
  mediaUrl   String
  caption    String?
  languageId String?
  duration   Int         @default(10)
  expiresAt  DateTime
  createdAt  DateTime    @default(now())
  author     User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  language   Language?   @relation(fields: [languageId], references: [id])
  views      StoryView[]
}

model StoryView {
  id           String   @id @default(uuid())
  storyId      String
  userId       String
  viewDuration Int?
  viewedAt     DateTime @default(now())
  story        Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([storyId, userId])
}

model SavedWord {
  id         String   @id @default(uuid())
  userId     String
  languageId String
  word       String
  definition String
  example    String?
  notes      String?
  difficulty String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id         String   @id @default(uuid())
  userId     String
  actorId    String?
  type       String
  message    String
  entityId   String?
  entityType String?
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  actor      User?    @relation("NotificationActor", fields: [actorId], references: [id])
  user       User     @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead, createdAt(sort: Desc)])
  @@index([entityId, entityType])
}

model NotificationPreference {
  id             String           @id @default(uuid())
  userSettingsId String
  type           NotificationType
  emailEnabled   Boolean          @default(true)
  pushEnabled    Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  userSettings   UserSettings     @relation(fields: [userSettingsId], references: [id], onDelete: Cascade)

  @@unique([userSettingsId, type])
  @@index([userSettingsId])
}

enum LanguageLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum NotificationType {
  NEW_MESSAGE
  NEW_MATCH
  MATCH_REQUEST
  CORRECTION
  MENTION
  COMMENT
  LIKE
  FOLLOW
  SYSTEM
}