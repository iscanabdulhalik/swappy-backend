// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LanguageLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model User {
  id                String             @id @default(uuid())
  firebaseUid       String             @unique
  email             String             @unique
  role              String?             @default("user") // user, admin
  hobbies           String[]
  birthDate         DateTime?
  password          String?
  displayName       String?
  firstName         String?
  lastName          String?
  bio               String?
  profileImageUrl   String?
  countryCode       String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  isActive          Boolean            @default(true)
  settings          UserSettings?
  languages         UserLanguage[]     @relation("UserLanguages")
  followers         Follow[]           @relation("UserFollowers")
  following         Follow[]           @relation("UserFollowing")
  matchesInitiated  Match[]            @relation("MatchInitiator")
  matchesReceived   Match[]            @relation("MatchReceiver")
  sentRequests      MatchRequest[]     @relation("RequestSender")
  receivedRequests  MatchRequest[]     @relation("RequestReceiver")
  sentMessages      Message[]          @relation("MessageSender")
  conversations     UserConversation[]
  stats             UserStats?

  MessageCorrection MessageCorrection[]
  Post              Post[]
  PostLike          PostLike[]
  Comment           Comment[]
  CommentLike       CommentLike[]
  Story             Story[]
  StoryView         StoryView[]
  SavedWord         SavedWord[]

  receivedNotifications  Notification[] @relation(name: "UserNotifications")
  sentActorNotifications Notification[] @relation("NotificationActor")
}

model UserLanguage {
  id         String        @id @default(uuid())
  userId     String
  languageId String
  level      LanguageLevel
  isNative   Boolean       @default(false)
  isLearning Boolean       @default(false)
  
  user       User          @relation("UserLanguages", fields: [userId], references: [id], onDelete: Cascade)
  language   Language      @relation(fields: [languageId], references: [id], onDelete: Cascade)
  
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@unique([userId, languageId])
}

model UserSettings {
  id                 String   @id @default(uuid())
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailNotifications Boolean  @default(true)
  pushNotifications  Boolean  @default(true)
  privateProfile     Boolean  @default(false)
  theme              String? // light, dark
  language           String   @default("en") // UI language preference
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model UserStats {
  id             String    @id @default(uuid())
  userId         String    @unique
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  matchesCount   Int       @default(0)
  messagesCount  Int       @default(0)
  followersCount Int       @default(0)
  followingCount Int       @default(0)
  postsCount     Int       @default(0) // Post sayısını takip etmek için eklendi
  learningDays   Int       @default(0)
  lastActiveDate DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Language {
  id            String         @id @default(uuid())
  code          String         @unique // ISO 639-1 code (en, es, tr, etc.)
  name          String
  nativeName    String // Name in the language itself
  flagEmoji     String? // Flag emoji for the language
  userLanguages UserLanguage[]
  conversations Conversation[]

  Post Post[]

  Story Story[]

  SavedWord SavedWord[]
}


model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Match {
  id             String        @id @default(uuid())
  initiatorId    String
  receiverId     String
  conversationId String?       @unique
  isFavorite     Boolean       @default(false)
  status         String        @default("active") // active, ended
  initiator      User          @relation("MatchInitiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  receiver       User          @relation("MatchReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model MatchRequest {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  status     String   @default("pending") // pending, accepted, rejected
  message    String?
  sender     User     @relation("RequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("RequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([senderId, receiverId])
}

model Conversation {
  id           String             @id @default(uuid())
  languageId   String
  language     Language           @relation(fields: [languageId], references: [id])
  match        Match?
  messages     Message[]
  participants UserConversation[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model UserConversation {
  id             String       @id @default(uuid())
  userId         String
  conversationId String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  lastReadAt     DateTime?
  isArchived     Boolean      @default(false)
  isMuted        Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, conversationId])
}

model Message {
  id             String              @id @default(uuid())
  conversationId String
  senderId       String
  content        String
  contentType    String              @default("text") // text, image, audio, video
  mediaUrl       String?
  sender         User                @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  conversation   Conversation        @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  corrections    MessageCorrection[]
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
}

model MessageCorrection {
  id               String   @id @default(uuid())
  messageId        String
  userId           String
  correctedContent String
  explanation      String?
  message          Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

// Gönderi sistemi için
model Post {
  id         String      @id @default(uuid())
  authorId   String
  content    String
  languageId String?
  isPublic   Boolean     @default(true)
  author     User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  language   Language?   @relation(fields: [languageId], references: [id])
  media      PostMedia[]
  likes      PostLike[]
  comments   Comment[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model PostMedia {
  id          String   @id @default(uuid())
  postId      String
  type        String
  url         String
  description String?
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}

model PostLike {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([postId, userId])
}

model Comment {
  id              String        @id @default(uuid())
  postId          String
  authorId        String
  content         String
  parentCommentId String?
  post            Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  author          User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parentComment   Comment?      @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: SetNull)
  replies         Comment[]     @relation("CommentReplies")
  likes           CommentLike[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model CommentLike {
  id        String   @id @default(uuid())
  commentId String
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([commentId, userId])
}

// Hikaye sistemi için
model Story {
  id         String      @id @default(uuid())
  authorId   String
  type       String
  mediaUrl   String
  caption    String?
  languageId String?
  duration   Int         @default(10)
  expiresAt  DateTime
  author     User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  language   Language?   @relation(fields: [languageId], references: [id])
  views      StoryView[]
  createdAt  DateTime    @default(now())
}

model StoryView {
  id           String   @id @default(uuid())
  storyId      String
  userId       String
  viewDuration Int?
  viewedAt     DateTime @default(now())
  story        Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([storyId, userId])
}

// Kelime kaydetme sistemi için
model SavedWord {
  id         String   @id @default(uuid())
  userId     String
  languageId String
  word       String
  definition String
  example    String?
  notes      String?
  difficulty String?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Bildirim sistemi için
model Notification {
  id         String   @id @default(uuid())
  userId     String
  actorId    String?
  type       String
  message    String
  entityId   String?
  entityType String?
  isRead     Boolean  @default(false)
  user       User     @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  actor      User?    @relation("NotificationActor", fields: [actorId], references: [id], onDelete: SetNull)
  createdAt  DateTime @default(now())
}